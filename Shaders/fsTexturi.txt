#version 330 core
in vec2 textureCoord;
in vec3 Normal;
in vec3 fragPos;
out vec4 Color;

uniform vec3 viewPos;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct spotlight{
	vec3 lightPos;
	vec3 lightDir;
	vec3 lightAmbient;
	vec3 lightDiffuse;
	vec3 lightSpecular;
	float lightCosInner;
	float lightCosOuter;
};

struct pointLight{
	vec3 lightPos;
	vec3 lightAmbient;
	vec3 lightDiffuse;
	vec3 lightSpecular;
	float linear;
	float constant;
	float quadratic;
};

uniform Material material;
uniform spotlight light;
uniform pointLight cub[4];

vec3 CalcPointLight(pointLight curr,vec3 normal, vec3 viewDir){
	vec3 ambient=curr.lightAmbient*vec3(texture(material.diffuse,textureCoord));
	float distance=length(curr.lightPos-fragPos);

	float attenuation=1.0/(curr.constant+curr.linear*distance+curr.quadratic*distance*distance);

	vec3 direction=normalize(curr.lightPos-fragPos);
	float diff=max(dot(normal,direction),0.0f);
	vec3 diffuse=curr.lightDiffuse*diff*vec3(texture(material.diffuse,textureCoord));

	vec3 reflectDir=reflect(-direction,normal);
	float spec=pow(max(dot(viewDir,reflectDir),0.0f),material.shininess);
	vec3 specular=spec*curr.lightSpecular*vec3(texture(material.specular,textureCoord));
	return ambient*attenuation*attenuation+diffuse*attenuation+specular*attenuation;
}

//Spotlight-ul nu are lumina ambienta

vec3 CalcSpotlight(spotlight curr, vec3 normal,vec3 viewDir){
	vec3 direction=normalize(curr.lightPos-fragPos);
	float diff=max(dot(normal,direction),0.0f);
	vec3 diffuse=curr.lightDiffuse*diff*vec3(texture(material.diffuse,textureCoord));

	vec3 reflectDir=reflect(-direction,normal);
	float spec=pow(max(dot(viewDir,reflectDir),0.0f),material.shininess);
	vec3 specular=spec*curr.lightSpecular*vec3(texture(material.specular,textureCoord));

	float theta=dot(direction,(-curr.lightDir));
    float intensity=clamp((theta-curr.lightCosOuter)/(curr.lightCosInner-curr.lightCosOuter),0.0f,1.0f);
	diffuse*=intensity;
    specular*=intensity;
	return diffuse+specular;
}

void main(){
   vec3 norm=normalize(Normal);
   vec3 viewDir=normalize(viewPos-fragPos);
   vec3 result=vec3(0.0f);

   for(int i=0;i<4;i++){
	   result+=CalcPointLight(cub[i],norm,viewDir);
   }

   result+=CalcSpotlight(light,norm,viewDir);

   Color=vec4(result,1.0f);
   
   //*texture(Texture1,textureCoord);
}